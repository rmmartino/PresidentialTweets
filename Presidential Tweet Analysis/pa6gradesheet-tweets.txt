CS201 Programming Assignment 6 checklist & grading sheet
PA Grade = 59.75/60 (Sarah), 56.75/60 (Rebecca)

Comments:
3/3 Intro comments complete and clear 
2/2 Appropriate in-line commentary given 
1.75/2 Function header comments included with name of programmer - what *are* the parameters?

Format:
1/1 Proper use of upper/lowercase
1/1 Appropriate use of whitespace

Supporting Documents:
3/3 Reflection - Rebecca missing (0/3)

Correctness/Completeness Issues:
3/3 User provides requested input
3.5/4 All appropriate error protection used (file, input values)- need try/except around file writing
3/3 Correctly implemented menu
3/3 Reads from the file(s) correctly and stores data for given problem
4.5/5 Which candidate is mentioned most frequently with a particular word? (word provided by the user) - the way to check if the word is part of another word (like, #email counts as email) is to loop through the words of the tweet. The tweet is just a string, so if you do for word in tweet, then you can check if the user's chosen word is in that word. OR, if you only want to get rid of hash tags, loop through the words the same way but strip off "#" before checking if it is the word you wanted.
The other alternative is to replace all "#" in your tweets at the start of the program, so then hashtags don't prevent anything from working correctly. This would be the simplest way to get around the # problem.
4.5/5 How frequently is each candidate mentioned in a tweet? Create a graph showing each candidate and the number of tweets mentioning them, sorted from least to most frequent. - you probably overcount hillary and bernie, as any tweet that has both their last and first name in it will be counted twice. The way to get around this is to subtract the number of times the full name appears.
5/5 How has the frequency of mention changed for each candidate between two different years on the same day? 
4/4 Another question of your choice
1/1 No other logic errors

Design Issues:
1/1 Appropriate variable names
5/5 Appropriate function design - great design of reuse of frequency counting
1/2 Reasonable data structure choices - when you need lots of counters, the best way to do that is with a dictionary. The key is the name you want to use for the counter. Then your code becomes much shorter and cleaner. Then you'd only need 1 parameter in your maximum function, the values from your dictionary.
3.5/4 Clear and well formatted output - for the first question, you should really say how many times as it is something that makes sense for the user to want to know as part of the question.


Extra Credit: (+3)
1. Particularly well commented and organized code
2. Particularly good/clear output, including excellent prompts - very nice menu, and issues menu for your self-created question.
3. Great function re-use


Additional Comments:
* Some efficiency comments for the future: in candidateWordAssociation, you actually could do your second for loop in the first for loop so that instead of creating a second list of tweets, you just only check the tweet if the word is in it. This would save time and space (which will be very important if the tweet files was huge)
Also, you shouldn't run the rest of that function if the length is zero, just end the function in that case (use "return")
